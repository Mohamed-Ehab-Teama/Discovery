Label Widget:
    label = tk.Label(parent, options)
        parent: The parent window or frame

        text: The text to display.
        bg: Background color.
        fg: Foreground (text) color.
        font: Font type and size.
        image: To display an image.
        padx/pady: Padding around the text.
        anchor: Positioning of the text (e.g., CENTER, LEFT, RIGHT).

        EX) label = tk.Label(root, text="Hello, Tkinter!", font=('Arial', 12), bg='yellow', fg='blue')

----------------------------------------------------------------------------------------------

Entry widget : is used to accept single-line text input from the user
    entry = tk.Entry(parent, options)

        parent: The parent window or frame.

        bg: Background color.
        bd: Border size.
        font: Font type and size.
        fg: Foreground (text) color.
        justify: Text alignment (LEFT, CENTER, RIGHT).
        relief: Border style (FLAT, SUNKEN, RAISED, GROOVE).
        show: To mask the input (e.g., for passwords).
        textvariable: To link the entry to a Tkinter variable (usually a StringVar).

        EX) entry = tk.Entry(root, font=('Arial', 12), show='*')

----------------------------------------------------------------------------------------------

Frame : 
    A frame is a rectangular region on the screen.
    A frame can also be used as a foundation class to implement complex widgets. It is used to organize a group of widgets

    w = frame( parent, options)

        bg: This option used to represent the normal background color displayed behind the label and indicator.
        bd: This option used to represent the size of the border around the indicator and the default value is 2 pixels.
        cursor: By using this option, the mouse cursor will change to that pattern when it is over the frame.
        height: The vertical dimension of the new frame.
        highlightcolor: This option used to represent the color of the focus highlight when the frame has the focus.
        highlightthickness: This option used to represent the color of the focus highlight when the frame does not have focus.
        highlightbackground: This option used to represent the thickness of the focus highlight..
        relief: The type of the border of the frame. Itâ€™s default value is set to FLAT.
        width: This option used to represents the width of the frame.


        EX)
            frame = tk.Frame(window, tk.Frame, bg='lightblue', bd=3, cursor='hand2', height=100, highlightcolor='red', highlightthickness=2, highlightbackground='black', relief=tk.RAISED, width=200)


----------------------------------------------------------------------------------------------

Button :

    btn = tk.Button(root, text="Press", command=lambda: func("See this worked!"))

    from functools import partial
    btn = tk.Button(root, text="Click Me", command=partial(function_name, "Thanks, Geeks for Geeks !!!"))

    login_button = tk.Button(parent, text="Login", command=function_name)

----------------------------------------------------------------------------------------------
import tkinter as tk
from tkinter import messagebox

# Function to validate the login
def validate_login():
    userid = username_entry.get()
    password = password_entry.get()

    # You can add your own validation logic here
    if userid == "admin" and password == "password":
        messagebox.showinfo("Login Successful", "Welcome, Admin!")
    else:
        messagebox.showerror("Login Failed", "Invalid username or password")

    # Create the main window
    parent = tk.Tk()
    parent.title("Login Form")

    # Create and place the username label and entry
    username_label = tk.Label(parent, text="Userid:")
    username_label.pack()

    username_entry = tk.Entry(parent)
    username_entry.pack()

    # Create and place the password label and entry
    password_label = tk.Label(parent, text="Password:")
    password_label.pack()

    password_entry = tk.Entry(parent, show="*")  # Show asterisks for password
    password_entry.pack()

    # Create and place the login button
    login_button = tk.Button(parent, text="Login", command=validate_login)
    login_button.pack()

    # Start the Tkinter event loop
    parent.mainloop()

----------------------------------------------------------------------------------------------

messagebox is a module that provides a way to display message boxes. 
The messagebox functions are modal, meaning they pause program execution and generally return a value that can be used to determine the user's response

----------------------------------------------------------------------------------------------