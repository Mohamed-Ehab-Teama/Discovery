# Write a function flatten_list(nested_list) that takes a list of lists and returns a single flattened list.
def flatten_list(nested_list):
    flattened = []
    for sublist in nested_list:
        flattened.extend(sublist)
    return flattened
# Example usage:
print(flatten_list([[1, 2], [3, 4], [5]]))  # Output: [1, 2, 3, 4, 5]

# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------

# Write a function merge_sorted_lists(list1, list2) that takes two sorted lists and returns a single sorted list by merging them.
def merge_sorted_lists(list1, list2):
    merged = []
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged.append(list1[i])
            i += 1
        else:
            merged.append(list2[j])
            j += 1
    merged.extend(list1[i:])
    merged.extend(list2[j:])
    return merged

# Example usage:
print(merge_sorted_lists([1, 3, 5], [2, 4, 6]))  # Output: [1, 2, 3, 4, 5, 6]

# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------

# Write a function char_frequency(text) that takes a string and returns a dictionary with the frequency of each character in the string.
def char_frequency(text):
    freq = {}
    for char in text:
        freq[char] = freq.get(char, 0) + 1
    return freq

# Example usage:
print(char_frequency("hello"))  # Output: {'h': 1, 'e': 1, 'l': 2, 'o': 1}


# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------

# A number is called a perfect number if it is equal to the sum of its proper divisors (excluding itself). Write a function is_perfect_number(num) to check if a number is perfect.
def is_perfect_number(num):
    if num < 2:
        return False
    divisors = [i for i in range(1, num) if num % i == 0]
    return sum(divisors) == num

# Example usage:
print(is_perfect_number(6))   # Output: True (6 = 1 + 2 + 3)
print(is_perfect_number(28))  # Output: True (28 = 1 + 2 + 4 + 7 + 14)
print(is_perfect_number(12))  # Output: False


# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------

# Write a function fibonacci(n) that takes a positive integer n and returns a list containing the first n numbers in the Fibonacci sequence.
def fibonacci(n):
    sequence = []
    a, b = 0, 1
    for _ in range(n):
        sequence.append(a)
        a, b = b, a + b
    return sequence
print(fibonacci(5))  # Output: [0, 1, 1, 2, 3]


# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------

